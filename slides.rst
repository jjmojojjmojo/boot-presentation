Give Them The Boot
==================

----

Give Them The Boot
==================

by Josh Johnson, aka *jjmojojjmojo*

----

About Josh
==========
* Dislikes *cleverness*. 
* Hates magic, as it requires the sacrifice of unicorns.
* Subscribes to the idea that *explicit is better than implicit*.
* Compulsive question asker.

----

Background
==========

I've had experience with many build tools.

* Make
* Ant
* Buildout
* Crushinator

----

All have their charm.
=====================

Make
----
General purpose task-definition and execution language.

Ant
---
XML-driven, java-centric build platform utilizing tasks.

Buildout
--------
Python isolation + make-like task manager.

Crushinator
-----------
Personal project. Python framework to build code skeleton generators.

----

And They All Have Their Downsides
=================================

Make
----
Somewhat esoteric syntax.

Ant
---
XML. Classpath nightmares.

Buildout
--------
INI file syntax is cumbersome.

Crushinator
-----------
Frameworks and boilerplate are just *bad*.


----

What About Leiningen? 
=====================

More on that... later...

----

Enter The *Boot*
================

----

What Is Boot?
=============

Boot incorporates concepts from all of the aforementioned build tools, and is chiefly used to implement build pipelines, but there's fundamental difference:

----

Boot Is *Not* A Build Tool.
===========================

----

Boot Is A Toolbox Of Awesome
============================

Boot provides a rich set of *components and abstractions* that we, as clojurists, can use to easily construct complex tooling, and *other amazing things*.

----

Boot is not (too) magical. 
==========================

Nothing in boot is *free*, but...

Boot abstracts the difficult stuff, no unicorn sacrifice required. 

----

Boot is Clojure!
================
Interacting with boot is like second nature:

* No DSLs (well, *one*, but it's useful and optional)
* No esoteric languages.
* No boilerplate.
* No hokey *project* concept.
* Works from the REPL.

For a clojurist, it's just doing more of what we already do: CLOJURE.

----

This sounds great, but what does it buy me?
===========================================

----

The Boot Giveth Unto Us
=======================

Boot provides some absolutely killer features. Some are borrowed from or inspired by other tools, some solve specific problems. All are implemented in *direct*, *sane* ways.

* Composible *tasks*.
* Imutable filesystem isolation.
* Imutable classpath isolation.
* Clojure *scripting*.

All of these components and their ancillary code can be used by *any* clojure project, even outside the realm of tooling or a build pipeline.

----

Tasks
=====

----

Tasks Are Code
==============
Each task is a simple clojure function. 

Easy to use macros are provided.

Simple, yet sophisticated command-line option DSL is parsed to provide a consistent user interface.

----

Immutability In Boot
====================

In boot, nothing happens in *real life* until a task is complete. This means:

* files that are generated by tasks are written to temporary directories.
* a file set is copied as it is passed from task to task, maintaining autonomy and enforcing immutability.
* the file set is *committed* to disk when the task is complete.
* destination files and "live" state are not manipulated until the tasks say so - there's no need to "clean up" the destination files upon error.
* the risk of inconsistent state is greatly minimized.

----

Tasks Are *Composible*
======================

Tasks can form a *pipeline*. Nothing is shared except the file system abstraction. The environment is isolated from one task to the next.

Each task can implement *middleware* to manipulate the file set or do other things on behalf of the next, or previous, task.

As such, tasks can be primary actors, manipulators, or just affect the pipeline itself.

----

Tasks Take CLI Arguments
========================

Boot provides a simple DSL that you can use in your task definition to take command line arguments. 

----

Filesystem Abstraction
======================

----

Nothing Is Shared
=================

As touched on earlier, boot has a concept of *immutable file sets*. 

This model allows strict isolation between tasks. 

----

Classpath Isolation
===================

----

Even The Runtime Isn't Shared!
==============================

Boot provides the concept of *pods*, which do some fancy footwork to provide a clean classpath within which arbitrary code can be executed.

This makes it possible to execute code with different versions of libraries loaded, *without resorting to managing multiple JVMs*.

----

Boot Scripting
==============

----

The Killerest Feature Of Them All
=================================

Boot allows for writing clojure *scripts*. 

The script declares its own dependencies, and boot manages downloading them.

Scripts can exist *anywhere*, be named *anything*, and require no other system setup beyond a JVM and boot itself.

----

Seriously, This Is Amazing
==========================

Boot scripting elevates clojure to the level of simplicity and utility of a score of non-jvm languages, such as **Python**, **Ruby** and **Perl**.

But Boot goes further:

* Provides dependency management.
* Intuitive CLI option handling.
* Pod/Fileset access for extreme autonomy and idempotence.

----

I'm So, So Seriously, You Guys
==============================

Boot scripting means distributing applications in single-file, self-contained scripts. 

* Easily managed via source control.
* Separated from library dependencies.
* Encourages mixing and remixing of scripts.
* Can replace shell scripting outright
* You never have to write anything but clojure.
* Java interop is at your fingertips.

----

I'm Sold! Enough talk, how do I get booting?
============================================

----

Wait, you said you were going to talk about Leiningen!
======================================================

----

Why Another Tool?
=================
Boot has its roots in clojurescript development, originating with the hoplon project.

Clojurescript, especially with hoplon in the mix, can lead to some very complex build pipelines.

Futzing with Lein plugins is messy and overly complex.

Hence, something simpler was needed to address specific problems. 

*And so boot was born.* 

----

Why Is Boot Better?
===================
*If I don't care about clojurescript, why should I care about boot?*

The simple answer: **boot is engineered to be better by design**. Period.

How so, you may ask?

* Boot is a suite of components, not a build tool.
* Boot solves some very hard problems in straight forward ways.
* Boot doesn't dictate you how to work.
* Boot doesn't mess with your environment.
* Boot doesn't require any boilerplate. No projects, no edn, nothing.

But most importantly:

* Boot encourages you to solve your own problems.
* Boot is (mostly) magic-free. Everything is on the table. Nothing "just happens".

----

That sounds mean!
=================

*But it's not! We all love Leiningen! It's what we know!*

Here are the simple facts:

* Leiningen is a *de facto* standard. There's no reason to settle for it if it doesn't meet your needs.
* Leiningen filled a very essential and necessary void in the clojure community.
* We wouldn't be where we are now, as a community, as a platform, without it.

But when you love something deeply enough, you are able to see its flaws. 

Boot is simply a reaction to those flaws, not a condemnation of the tool or what it's done for us.

----

Seriously, enough talk, how do I get booting?
=============================================

----

Installation
============

Installation is extra simple. Just download the latest boot executable, and put it somewhere where you can access it.

Linux/OS X
----------

::
    
   $ wget https://github.com/boot-clj/boot/releases/download/2.0.0/boot.sh
   $ mv boot.sh boot && chmod a+x boot && sudo mv boot /usr/local/bin
   


Windows
-------

::
    
   C:\> wget https://github.com/boot-clj/boot/releases/download/2.0.0/boot.exe
   C:\> move boot.exe C:\Windows\System32 
   


----

Interacting With Boot
=====================
Now that we have the :code:`boot` executable, we can ask it for help with the :code:`-h` flag:

.. code-block:: sh
   
   $ boot -h
   
   Usage:   boot OPTS <task> TASK_OPTS <task> TASK_OPTS ...
   
   OPTS:    -a --asset-paths PATH      Add PATH to set of asset directories.
            -b --boot-script           Print generated boot script for debugging.
            -B --no-boot-script        Ignore boot script in current directory.
            -C --no-colors             Remove ANSI escape codes from printed output.
            -d --dependencies ID:VER   Add dependency to project (eg. -d foo/bar:1.2.3).
            -e --set-env KEY=VAL       Add KEY => VAL to project env map.
            -h --help                  Print basic usage and help info.
            -P --no-profile            Skip loading of profile.boot script.
            -r --resource-paths PATH   Add PATH to set of resource directories.
            -q --quiet                 Suppress output from boot itself.
            -s --source-paths PATH     Add PATH to set of source directories.
            -t --target-path PATH      Set the target directory to PATH.
            -u --update                Update boot to latest release version.
            -v --verbose               More error info (-vv more verbose, etc.)
            -V --version               Print boot version info.
   
----

Interacting With Boot Tasks
===========================
The output on the previous slide is truncated for the sake of brevity - there are also entries for each task, and useful information about environment variables and configuration files that boot can utilize.

To get help with a specific task, you can pass the :code:`-h` flag to it directly:

.. code-block:: sh
   
   $ boot aot -h
   Perform AOT compilation of Clojure namespaces.
   
   Options:
     -h, --help          Print this help info.
     -a, --all           Compile all namespaces.
     -n, --namespace NS  Conj NS onto the set of namespaces to compile.
   


----

Helpful Hints
=============

Ambiguous task options can be delineated with :code:`--`

.. code-block:: sh
 
 $ boot aot -n boo -n help -- pom jar
     
As stated before, boot tasks are *composable*. Each task specified becomes part of the pipeline:

.. code-block:: sh
 
 $ boot -s "." show -f
 .nrepl-history
 build.boot
 presentation.html
 slides.rst
 

.. code-block:: sh
 
 $ boot -s "." sift -v -i "presentation.html" show -f
 .nrepl-history
 build.boot
 slides.rst
 

----

Helpful Hints
=============

Some values are *complex*. Most are hinted at in the help output.

:code:`KEY:VAL` indicates a *map*. The key and value are separated by a colon (:). Each additional use of that command-line parameter will *conjoin* the key and value.

:code:`KEY=VAL` indicates a map as well, but the key will end up being a clojure *keyword*. 

Most options that are *plural* can be supplied multiple times (e.g. :code:`--source-paths`)

----

build.boot
==========

Boot has a concept analogous to the :code:`Makefile` in Make, except that it is also a place to set default values for command-line options.

Boot settings and task definitions are placed in :code:`build.boot`.

Boot looks for this file in the current working directory.

All settings within can be provided via command-line options as well.

----

Boot Environment
================
Boot has the concept of an *environment*, which amounts to a singleton map of boot-specific settings.

The :code:`build.boot` file creates a default namespace, named :code:`boot.user`. 

By default, most of :code:`boot.core` is automatically imported into that namespace on your behalf.

The environment can be manipulated with the :code:`set-env!` function in :code:`build.boot`, or by various command-line arguments to the :code:`boot` executable.

----

:code:`build.boot` Example: Environment
=======================================
Here we will declare a dependency, and run a repl.

In :code:`build.boot`:

.. code-block:: clojure
   :linenos:
   
   (set-env!
     :dependencies '[[me.raynes/fs "1.4.6"]])
   
In our shell

.. code-block:: sh
   :emphasize-lines: 2,3,4
   
   $ boot repl
   Retrieving fs-1.4.6.jar from https://clojars.org/repo/
   Retrieving xz-1.5.jar from https://repo1.maven.org/maven2/
   Retrieving commons-compress-1.8.jar from https://repo1.maven.org/maven2/

.. code-block:: clojure
   
   boot.user=> (require '[me.raynes.fs :refer [list-dir name]])
   boot.user=> (map #(name %1) (list-dir "."))
   (".nrepl-history" ".nrepl-port" "build" "presentation" "slides")
   

----

:code:`build.boot` Example: Environment
=======================================

The previous :code:`build.boot` example is equivalent to the following boot command-line:

.. code-block:: sh
   
   $ boot -d "me.raynes/fs:1.4.6" repl
   

----


Example Tasks
=============

----

The Simplest Task
=================

Consider the following :code:`build.boot` file:

.. code-block:: clojure
   
   (set-env!
     :dependencies '[[me.raynes/fs "1.4.6"]])
   
   (ns boot.user
     (:require [me.raynes.fs :as fs]))
   
   (deftask simple
     "Simple example task"
     []
     (prn (map #(fs/name %1) (fs/list-dir "."))))
   

----

The Simplest Task
=================

If we now run :code:`boot -h`, we will see it in the list of tasks:

.. code-block:: sh
   
   $ boot -h
   ...
             simple                     Simple example task
   ...
   

We can also ask for help with our new task:

.. code-block:: sh
   
   $ boot simple -h
   Simple example task
   
   Options:
     -h, --help  Print this help info.
   

----

The Simplest Task
=================

This task doesn't interfere with anything in the pipeline. It doesn't produce or process files.

However, it can still be composed with other tasks:

.. code-block:: sh
   
   $ boot -s "." simple show -f
   ("#slides" ".nrepl-history" "build" "build" "presentation" "slides")
   .nrepl-history
   build.boot
   presentation.html
   slides.rst 
   

----

Task Option DSL
===============

Boot provides a powerful DSL for processing command line arguments for tasks.

----

Taking CLI Options
==================

----

Using The Fileset
=================

Lets modify our task to uppercase all of the files in the fileset. This will require implementing some *middleware*.

.. code-block:: clojure
   :linenos:
   
   

----

Serve Static Files Within The Fileset
=====================================

----

Using Pods
==========

----

Run A Ring Application With Pods
================================

.. code-block:: clojure
  :linenos:
  
  (deftask webserver-isolated []
  "Run the web server in a pod"
  (let [runner (pod/make-pod (get-env))]
    (pod/with-eval-in runner 
      (def server false))
    (fn [next-task]
      (fn [fileset]
        (pod/with-eval-in runner
          (when server
            (do 
              (println "Stopping server")
              (.stop server))))
        (pod/with-eval-in runner
          (require '[ring.adapter.jetty :as jetty]
                   '[my-code-here :refer [app]])
          (def server (jetty/run-jetty #'app {:port 8080 :join? false}))
          (println "Starting server")
          (.start server))))))

----